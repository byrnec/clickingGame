{"ast":null,"code":"import _classCallCheck from \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/carlabyrne/Desktop/clickingGame/reactpractice/src/App.jsx\";\nimport \"./App.css\"; // This actually imports the React node modules\n\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport tiles from \"./tiles.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.removeAnimation = function () {\n      // Grab the text at the top middle of the page\n      var element = document.getElementById(\"animate-this\"); // If the guess is correct...\n\n      if (_this.state.isGuessCorrect) {\n        // ...remove the animation style of the correct guess\n        element.classList.remove(\"jello-vertical\");\n      } // If the guess is incorrect...\n\n\n      if (!_this.state.isGuessCorrect) {\n        // ...remove the animation style of the incorrect guess\n        element.classList.remove(\"shake-horizontal\");\n      }\n    };\n\n    _this.addAnimation = function (isCorrect) {\n      // Grab the text at the top middle of the page\n      var element = document.getElementById(\"animate-this\"); // If the guess is correct...\n\n      if (isCorrect) {\n        // ...add the animation style of the correct guess\n        element.classList.add(\"jello-vertical\");\n      } // If the guess is incorrect...\n\n\n      if (!isCorrect) {\n        // ...add the animation style of the incorrect guess\n        element.classList.add(\"shake-horizontal\");\n      }\n    };\n\n    _this.toggleAnimation = function (isCorrect) {\n      // If the guess is correct...\n      if (isCorrect) {\n        // Add animation\n        _this.addAnimation(true); // Wait a split second and then remove it\n\n\n        setTimeout(_this.removeAnimation, 500);\n      } // If the guess is incorrect...\n\n\n      if (!isCorrect) {\n        // Add animation\n        _this.addAnimation(false); // Wait a split second and then remove it\n\n\n        setTimeout(_this.removeAnimation, 500);\n      }\n    };\n\n    _this.handleSaveClick = function (id) {\n      // Variable to hold the tiles state.\n      var tilez = _this.state.tiles; // Search through character tiles to find the one that matches the clicked id.\n\n      var tileClicked = tilez.filter(function (tile) {\n        return tile.id === id;\n      }); // If the tile isn't clicked...\n\n      if (!tileClicked[0].clicked) {\n        // ...set it to now be clicked\n        tileClicked[0].clicked = true; // ...call this function to register the correct guess\n\n        _this.handleCorrectClick(); // ...add the bouncy animation for correct guess\n\n\n        _this.toggleAnimation(true); // ... randomize character tiles\n\n\n        _this.randomizeCharacters(tilez);\n\n        _this.setState({\n          tilez: tilez\n        });\n      } else {\n        _this.handleIncorrectClick();\n\n        _this.toggleAnimation(false);\n      }\n    };\n\n    _this.randomizeCharacters = function (characters) {\n      characters.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n    };\n\n    _this.handleCorrectClick = function () {\n      _this.setState({\n        isGuessCorrect: true\n      });\n\n      if (_this.state.score + 1 > _this.state.topScore) {\n        _this.setState({\n          topScore: _this.state.topScore + 1\n        });\n      }\n\n      if (_this.state.score + 1 >= _this.state.maxScore) {\n        _this.setState({\n          score: _this.state.score + 1,\n          message: \"CONGRATS! YOU WIN!\",\n          messageClass: \"correct\"\n        });\n      } else {\n        _this.setState({\n          score: _this.state.score + 1,\n          message: \"YOU GUESSED CORRECTLY!\",\n          messageClass: \"correct\"\n        });\n      }\n    };\n\n    _this.handleIncorrectClick = function () {\n      _this.setState({\n        message: \"INCORRECT. PLAY AGAIN?\",\n        isGuessCorrect: false\n      }); // this.toggleIncorrectAnimation();\n\n\n      _this.resetGame();\n    };\n\n    _this.resetGame = function (id) {\n      var tilez = _this.state.tiles;\n\n      for (var i = 0; i < tilez.length; i++) {\n        tilez[i].clicked = false;\n      }\n\n      _this.setState({\n        score: 0\n      });\n    };\n\n    _this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 12,\n      topScore: 0,\n      message: \"CLICK AN IMAGE TO BEGIN!\"\n    };\n    return _this;\n  }\n  /*\n   *  ----------------------------------------------------------------------------------\n   *\n   *  Functions for handling animation\n   *\n   *  ----------------------------------------------------------------------------------\n   */\n  // REMOVES animation CSS class\n\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*\n     *  ----------------------------------------------------------------------------------\n     *\n     *  Render and Return\n     *\n     *  ----------------------------------------------------------------------------------\n     */\n    // Render the App component on the page\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          message = _this$state.message,\n          score = _this$state.score,\n          tiles = _this$state.tiles,\n          topScore = _this$state.topScore;\n      return React.createElement(\"div\", {\n        className: \"fluid-container lodge h-100vh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        className: \"row\",\n        score: score,\n        topScore: topScore,\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(Header, {\n        className: \"bg-header row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, tiles.map(function (_ref) {\n        var id = _ref.id,\n            name = _ref.name,\n            image = _ref.image,\n            clicked = _ref.clicked;\n        return React.createElement(Card, {\n          key: id,\n          id: id,\n          name: name,\n          image: image,\n          clicked: clicked,\n          clickHandler: _this2.handleSaveClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        className: \"footer-mgn row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/carlabyrne/Desktop/clickingGame/reactpractice/src/App.jsx"],"names":["React","Component","Card","Footer","Header","Navbar","tiles","App","removeAnimation","element","document","getElementById","state","isGuessCorrect","classList","remove","addAnimation","isCorrect","add","toggleAnimation","setTimeout","handleSaveClick","id","tilez","tileClicked","filter","tile","clicked","handleCorrectClick","randomizeCharacters","setState","handleIncorrectClick","characters","sort","a","b","Math","random","score","topScore","maxScore","message","messageClass","resetGame","i","length","map","name","image"],"mappings":"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","sourcesContent":["import \"./App.css\";\n\n// This actually imports the React node modules\nimport React, { Component } from \"react\";\n\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport tiles from \"./tiles.json\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 12,\n      topScore: 0,\n      message: \"CLICK AN IMAGE TO BEGIN!\"\n    };\n  }\n\n  /*\n   *  ----------------------------------------------------------------------------------\n   *\n   *  Functions for handling animation\n   *\n   *  ----------------------------------------------------------------------------------\n   */\n\n  // REMOVES animation CSS class\n  removeAnimation = () => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (this.state.isGuessCorrect) {\n      // ...remove the animation style of the correct guess\n      element.classList.remove(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!this.state.isGuessCorrect) {\n      // ...remove the animation style of the incorrect guess\n      element.classList.remove(\"shake-horizontal\");\n    }\n  };\n\n  // ADDS animation CSS class\n  addAnimation = isCorrect => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (isCorrect) {\n      // ...add the animation style of the correct guess\n      element.classList.add(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // ...add the animation style of the incorrect guess\n      element.classList.add(\"shake-horizontal\");\n    }\n  };\n\n  // TOGGLES the CSS class for animation\n  toggleAnimation = isCorrect => {\n    // If the guess is correct...\n    if (isCorrect) {\n      // Add animation\n      this.addAnimation(true);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // Add animation\n      this.addAnimation(false);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n  };\n\n  /*\n   *  ----------------------------------------------------------------------------------\n   *\n   *  Functions for game logic\n   *\n   *  ----------------------------------------------------------------------------------\n   */\n\n  // Main click handler function\n  handleSaveClick = id => {\n    // Variable to hold the tiles state.\n    const tilez = this.state.tiles;\n    // Search through character tiles to find the one that matches the clicked id.\n    const tileClicked = tilez.filter(tile => tile.id === id);\n\n    // If the tile isn't clicked...\n    if (!tileClicked[0].clicked) {\n      // ...set it to now be clicked\n      tileClicked[0].clicked = true;\n      // ...call this function to register the correct guess\n      this.handleCorrectClick();\n      // ...add the bouncy animation for correct guess\n      this.toggleAnimation(true);\n\n      // ... randomize character tiles\n      this.randomizeCharacters(tilez);\n\n      this.setState({ tilez });\n    } else {\n      this.handleIncorrectClick();\n      this.toggleAnimation(false);\n    }\n  };\n\n  // Function to randomize the characters\n  randomizeCharacters = characters => {\n    characters.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses/clicks\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"CONGRATS! YOU WIN!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"YOU GUESSED CORRECTLY!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses/clicks\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"INCORRECT. PLAY AGAIN?\",\n      isGuessCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const tilez = this.state.tiles;\n    for (let i = 0; i < tilez.length; i++) {\n      tilez[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  /*\n   *  ----------------------------------------------------------------------------------\n   *\n   *  Render and Return\n   *\n   *  ----------------------------------------------------------------------------------\n   */\n\n  // Render the App component on the page\n  render() {\n    const { message, score, tiles, topScore } = this.state;\n    return (\n      <div className=\"fluid-container lodge h-100vh\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {tiles.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className=\"footer-mgn row\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}